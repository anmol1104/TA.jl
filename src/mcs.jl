"""
    f‚Çë(e::Vector{Arc}, o::Origin)

Return minimum flow on segment `e` from origin `o`
"""
function f‚Çë(e::Vector{Arc}, o::Origin)
    f = Inf
    k = o.k
    for a ‚àà e if a.X ≥[k] < f f = a.X ≥[k] end end
    return f
end

"""
    ispotential(a::Arc, o::Origin, G::Graph)

Identfies if arc `a` on graph `G` is a potential arc wrt flow from origin `o`
"""
function ispotential(a::Arc, o::Origin, G::Graph)
    k   = o.k
    x ≥‚Çê = a.X ≥[k]
    c‚Çú‚Çï = a.c

    t   = a.t
    p·µ£‚Çú = path(G, o, t)
    u ≥‚Çú = 0.
    for a ‚àà p·µ£‚Çú u ≥‚Çú += a.c end
    
    h = a.h
    p·µ£‚Çï = path(G, o, h)
    u ≥‚Çï = 0.
    for a ‚àà p·µ£‚Çï u ≥‚Çï += a.c end
    
    œÄ ≥‚Çê = u ≥‚Çú + c‚Çú‚Çï - u ≥‚Çï 

    bool = x ≥‚Çê > 1e-12 && œÄ ≥‚Çê > 1e-16

    return bool
end

"""
    ùù≥(p::PAS, Œª)

Evaluates amount of flow `Œ¥` to shift on pas `p`.
If `Œ¥` is less than the threshold limit of `Œª` then `Œ¥` is assumed to be zero.
"""
function ùù≥(p::PAS, Œª)
    e‚ÇÅ, e‚ÇÇ, o = p.e‚ÇÅ, p.e‚ÇÇ, p.o
    
    f‚ÇÅ, f‚ÇÇ   = f‚Çë(e‚ÇÅ, o), f‚Çë(e‚ÇÇ, o)
    c‚ÇÅ, c‚ÇÇ   = c‚Çë(e‚ÇÅ), c‚Çë(e‚ÇÇ)
    c‚ÇÅ‚Ä≤, c‚ÇÇ‚Ä≤ = c‚Çë‚Ä≤(e‚ÇÅ), c‚Çë‚Ä≤(e‚ÇÇ)
    
    Œî = (c‚ÇÇ - c‚ÇÅ)/(c‚ÇÅ‚Ä≤ + c‚ÇÇ‚Ä≤)
    
    if abs(c‚ÇÇ - c‚ÇÅ) < Œª Œ¥ = 0. end
    if isnan(Œî) Œ¥ = 0.
    elseif Œî ‚â• 0 Œ¥ = min(Œî, f‚ÇÇ)
    else Œ¥ = max(Œî, -f‚ÇÅ)
    end

    return Œ¥
end

"""
    shift(p::PAS, Œ¥)

Shifts flow `Œ¥` on pas `p`.
"""
function shift(p::PAS, Œ¥)
    e‚ÇÅ, e‚ÇÇ, o = p.e‚ÇÅ, p.e‚ÇÇ, p.o
    k = o.k
    
    for a ‚àà e‚ÇÅ
        a.X ≥[k] += Œ¥
        a.x += Œ¥
        a.c = c‚Çê(a)
        a.c‚Ä≤= c‚Çê‚Ä≤(a)
    end

    for a ‚àà e‚ÇÇ
        a.X ≥[k] -= Œ¥
        a.x -= Œ¥
        a.c = c‚Çê(a)
        a.c‚Ä≤= c‚Çê‚Ä≤(a)
    end
    
    return
end

"""
    MCS(a::Arc, o::Origin, G::Graph)

Develops pas for arc `a` wrt origin `o` using Maximum Cost Search method
"""
function MCS(a::Arc, o::Origin, G::Graph)
    depth, maxdepth = 1, 2
    
    t, h = a.t, a.h
    i, j = t.k, h.k
    r, L‚ÇÅ = o.n, o.L
    N, A, K = G.N, G.A, G.K
    
    p·µ£‚Çï = path(G, L‚ÇÅ, r, a.h)
    
    s = 1
    p = PAS(Arc[], Arc[], o)
    
    
    while depth ‚â§ maxdepth
        # Intialize
        l = zeros(Int64, length(N))
        for a ‚àà p·µ£‚Çï
            t = a.t
            k = t.k
            l[k] = -1 
        end
        l[i] = 1
        l[j] = 1

        L‚ÇÇ = Vector{Int64}(undef, length(N))
        L‚ÇÇ[j] = K[i,j]
        
        # Iterate
        t, h = a.t, a.h
        while true
            h = t
            
            # Maximum Cost Search
            f = 0.
            for n ‚àà h.T 
                k = K[n,h.k]
                x = A[k].X ≥[o.k]
                c = A[k].c
                if x > 1e-12 && c > f 
                    f = c
                    t = N[n]
                    L‚ÇÇ[h.k] = k
                end
            end
            
            # PAS found
            if isone(-l[t.k])
                e‚ÇÅ = path(G, L‚ÇÅ, t, a.h)
                e‚ÇÇ = path(G, L‚ÇÇ, t, a.h)
 
                s = l[t.k]
                p = PAS(e‚ÇÅ, e‚ÇÇ, o)

                Œ¥ = ùù≥(p, 0.)
                shift(p, Œ¥)
                bool = ispotential(a, o, G)
                if !bool
                    return s, p
                else
                    depth += 1
                    break
                end
            # Cycle found
            elseif isone(l[t.k])
                if depth < maxdepth
                    p‚Çï‚Çú = path(G, L‚ÇÇ, h, t)
                    if h != t push!(p‚Çï‚Çú, A[K[t.k, h.k]]) end
                    Œ¥ = Inf
                    k = o.k
                    for a ‚àà p‚Çï‚Çú if a.X ≥[k] ‚â§ Œ¥ Œ¥ = a.X ≥[k] end end
                    for a ‚àà p‚Çï‚Çú 
                        a.X ≥[k] -= Œ¥
                        a.x -= Œ¥
                        a.c = c‚Çê(a)
                        a.c‚Ä≤= c‚Çê‚Ä≤(a)
                    end
                end
                depth += 1
                break
            # Continue
            else l[t.k] = 1
            end
        end
    end

    return s, p
end